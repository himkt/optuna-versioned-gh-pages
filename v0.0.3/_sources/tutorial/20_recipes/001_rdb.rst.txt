
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/20_recipes/001_rdb.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_tutorial_20_recipes_001_rdb.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_20_recipes_001_rdb.py:


.. _rdb:

Saving/Resuming Study with RDB Backend
==========================================

An RDB backend enables persistent experiments (i.e., to save and resume a study) as well as access to history of studies.
In addition, we can run multi-node optimization tasks with this feature, which is described in :ref:`distributed`.

In this section, let's try simple examples running on a local environment with SQLite DB.

.. note::
    You can also utilize other RDB backends, e.g., PostgreSQL or MySQL, by setting the storage argument to the DB's URL.
    Please refer to `SQLAlchemy's document <https://docs.sqlalchemy.org/en/latest/core/engines.html#database-urls>`_ for how to set up the URL.


New Study
---------

We can create a persistent study by calling :func:`~optuna.study.create_study` function as follows.
An SQLite file ``example.db`` is automatically initialized with a new study record.

.. GENERATED FROM PYTHON SOURCE LINES 23-35

.. code-block:: default


    import logging
    import sys

    import optuna

    # Add stream handler of stdout to show the messages
    optuna.logging.get_logger("optuna").addHandler(logging.StreamHandler(sys.stdout))
    study_name = "example-study"  # Unique identifier of the study.
    storage_name = "sqlite:///{}.db".format(study_name)
    study = optuna.create_study(study_name=study_name, storage=storage_name)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    A new study created in RDB with name: example-study




.. GENERATED FROM PYTHON SOURCE LINES 36-37

To run a study, call :func:`~optuna.study.Study.optimize` method passing an objective function.

.. GENERATED FROM PYTHON SOURCE LINES 37-46

.. code-block:: default



    def objective(trial):
        x = trial.suggest_float("x", -10, 10)
        return (x - 2) ** 2


    study.optimize(objective, n_trials=3)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Trial 0 finished with value: 18.7750441161467 and parameters: {'x': 6.3330178993568325}. Best is trial 0 with value: 18.7750441161467.
    Trial 1 finished with value: 12.394425638449666 and parameters: {'x': -1.5205717772046157}. Best is trial 1 with value: 12.394425638449666.
    Trial 2 finished with value: 2.929247070591959 and parameters: {'x': 3.7115043297029544}. Best is trial 2 with value: 2.929247070591959.




.. GENERATED FROM PYTHON SOURCE LINES 47-52

Resume Study
------------

To resume a study, instantiate a :class:`~optuna.study.Study` object
passing the study name ``example-study`` and the DB URL ``sqlite:///example-study.db``.

.. GENERATED FROM PYTHON SOURCE LINES 52-57

.. code-block:: default



    study = optuna.create_study(study_name=study_name, storage=storage_name, load_if_exists=True)
    study.optimize(objective, n_trials=3)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Using an existing study with name 'example-study' instead of creating a new one.
    Trial 3 finished with value: 10.023656121479526 and parameters: {'x': 5.166015811944016}. Best is trial 2 with value: 2.929247070591959.
    Trial 4 finished with value: 44.73422087542719 and parameters: {'x': -4.688364589002845}. Best is trial 2 with value: 2.929247070591959.
    Trial 5 finished with value: 56.94412484209588 and parameters: {'x': -5.546133105246414}. Best is trial 2 with value: 2.929247070591959.




.. GENERATED FROM PYTHON SOURCE LINES 58-63

Experimental History
--------------------

We can access histories of studies and trials via the :class:`~optuna.study.Study` class.
For example, we can get all trials of ``example-study`` as:

.. GENERATED FROM PYTHON SOURCE LINES 63-67

.. code-block:: default


    study = optuna.create_study(study_name=study_name, storage=storage_name, load_if_exists=True)
    df = study.trials_dataframe(attrs=("number", "value", "params", "state"))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Using an existing study with name 'example-study' instead of creating a new one.




.. GENERATED FROM PYTHON SOURCE LINES 68-69

The method :func:`~optuna.study.Study.trials_dataframe` returns a pandas dataframe like:

.. GENERATED FROM PYTHON SOURCE LINES 69-72

.. code-block:: default


    print(df)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

       number      value  params_x     state
    0       0  18.775044  6.333018  COMPLETE
    1       1  12.394426 -1.520572  COMPLETE
    2       2   2.929247  3.711504  COMPLETE
    3       3  10.023656  5.166016  COMPLETE
    4       4  44.734221 -4.688365  COMPLETE
    5       5  56.944125 -5.546133  COMPLETE




.. GENERATED FROM PYTHON SOURCE LINES 73-76

A :class:`~optuna.study.Study` object also provides properties
such as :attr:`~optuna.study.Study.trials`, :attr:`~optuna.study.Study.best_value`,
:attr:`~optuna.study.Study.best_params` (see also :ref:`first`).

.. GENERATED FROM PYTHON SOURCE LINES 76-82

.. code-block:: default



    print("Best params: ", study.best_params)
    print("Best value: ", study.best_value)
    print("Best Trial: ", study.best_trial)
    print("Trials: ", study.trials)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Best params:  {'x': 3.7115043297029544}
    Best value:  2.929247070591959
    Best Trial:  FrozenTrial(number=2, values=[2.929247070591959], datetime_start=datetime.datetime(2021, 5, 23, 12, 15, 56, 354355), datetime_complete=datetime.datetime(2021, 5, 23, 12, 15, 56, 367572), params={'x': 3.7115043297029544}, distributions={'x': UniformDistribution(high=10.0, low=-10.0)}, user_attrs={}, system_attrs={}, intermediate_values={}, trial_id=3, state=TrialState.COMPLETE, value=None)
    Trials:  [FrozenTrial(number=0, values=[18.7750441161467], datetime_start=datetime.datetime(2021, 5, 23, 12, 15, 56, 244131), datetime_complete=datetime.datetime(2021, 5, 23, 12, 15, 56, 263770), params={'x': 6.3330178993568325}, distributions={'x': UniformDistribution(high=10.0, low=-10.0)}, user_attrs={}, system_attrs={}, intermediate_values={}, trial_id=1, state=TrialState.COMPLETE, value=None), FrozenTrial(number=1, values=[12.394425638449666], datetime_start=datetime.datetime(2021, 5, 23, 12, 15, 56, 310512), datetime_complete=datetime.datetime(2021, 5, 23, 12, 15, 56, 325197), params={'x': -1.5205717772046157}, distributions={'x': UniformDistribution(high=10.0, low=-10.0)}, user_attrs={}, system_attrs={}, intermediate_values={}, trial_id=2, state=TrialState.COMPLETE, value=None), FrozenTrial(number=2, values=[2.929247070591959], datetime_start=datetime.datetime(2021, 5, 23, 12, 15, 56, 354355), datetime_complete=datetime.datetime(2021, 5, 23, 12, 15, 56, 367572), params={'x': 3.7115043297029544}, distributions={'x': UniformDistribution(high=10.0, low=-10.0)}, user_attrs={}, system_attrs={}, intermediate_values={}, trial_id=3, state=TrialState.COMPLETE, value=None), FrozenTrial(number=3, values=[10.023656121479526], datetime_start=datetime.datetime(2021, 5, 23, 12, 15, 56, 459130), datetime_complete=datetime.datetime(2021, 5, 23, 12, 15, 56, 477106), params={'x': 5.166015811944016}, distributions={'x': UniformDistribution(high=10.0, low=-10.0)}, user_attrs={}, system_attrs={}, intermediate_values={}, trial_id=4, state=TrialState.COMPLETE, value=None), FrozenTrial(number=4, values=[44.73422087542719], datetime_start=datetime.datetime(2021, 5, 23, 12, 15, 56, 515034), datetime_complete=datetime.datetime(2021, 5, 23, 12, 15, 56, 529139), params={'x': -4.688364589002845}, distributions={'x': UniformDistribution(high=10.0, low=-10.0)}, user_attrs={}, system_attrs={}, intermediate_values={}, trial_id=5, state=TrialState.COMPLETE, value=None), FrozenTrial(number=5, values=[56.94412484209588], datetime_start=datetime.datetime(2021, 5, 23, 12, 15, 56, 557705), datetime_complete=datetime.datetime(2021, 5, 23, 12, 15, 56, 570896), params={'x': -5.546133105246414}, distributions={'x': UniformDistribution(high=10.0, low=-10.0)}, user_attrs={}, system_attrs={}, intermediate_values={}, trial_id=6, state=TrialState.COMPLETE, value=None)]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.719 seconds)


.. _sphx_glr_download_tutorial_20_recipes_001_rdb.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: 001_rdb.py <001_rdb.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: 001_rdb.ipynb <001_rdb.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
